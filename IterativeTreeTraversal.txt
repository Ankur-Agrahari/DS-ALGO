//inorder - https://www.educative.io/edpresso/how-to-perform-an-iterative-inorder-traversal-of-a-binary-tree
public static void inOrderTraversal(Node root)
    {
      Stack<Node> stack = new Stack();
      Node curr = root;
      while (!stack.empty() || curr != null)
      {
        if (curr != null)
        {
          stack.push(curr);
          curr = curr.left;
        }
        else
        {
          curr = stack.pop();
          System.out.print(curr.data + " ");
          curr = curr.right;
        }
      }
    }

//preOrder - http://www.algorithmsandme.com/iterative-preorder-traversal/
public void preorder(TreeNode root){
       Stack<TreeNode> stack = new Stack<>();
        
       if(root == null) return ;
 
       TreeNode currentNode = null;
       /* Step 1 : Start with root */
       stack.push(root);
 
       while(!stack.isEmpty()){
           /* Step 5 : Pop the node */
           currentNode = stack.pop();
            
           /* Step 2 : Print the node */
           System.out.println(currentNode.getValue());
            
           /* Step 3: Push right child first */
           if(currentNode.getRight() != null){
               stack.push(currentNode.getRight());
           }
           /* Step 4: Push left child */
           if(currentNode.getLeft() != null){
               stack.push(currentNode.getLeft());
           }
       }
   }


//postorder with two stack -  https://www.geeksforgeeks.org/iterative-postorder-traversal/
void postOrderIterative(node root) 
    { 
        // Create two stacks 
        s1 = new Stack<>(); 
        s2 = new Stack<>(); 
  
        if (root == null) 
            return; 
  
        // push root to first stack 
        s1.push(root); 
  
        // Run while first stack is not empty 
        while (!s1.isEmpty()) { 
            // Pop an item from s1 and push it to s2 
            node temp = s1.pop(); 
            s2.push(temp); 
  
            // Push left and right children of 
            // removed item to s1 
            if (temp.left != null) 
                s1.push(temp.left); 
            if (temp.right != null) 
                s1.push(temp.right); 
        } 
  
        // Print all elements of second stack 
        while (!s2.isEmpty()) { 
            node temp = s2.pop(); 
            System.out.print(temp.data + " "); 
        } 
    } 
  


